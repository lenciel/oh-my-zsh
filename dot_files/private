#PATH

PATH="/Users/lenciel/Library/Python/2.7/bin:/usr/local/bin:usr/local/share/python:/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin:$HOME/bin:$PATH"

if [ "`uname`" = "Darwin" ]; then
    compctl -f -x 'p[2]' -s "`/bin/ls -d1 /Applications/*/*.app  /Applications/*.app | sed 's|^.*/\([^/]*\)\.app.*|\\1|;s/ /\\\\ /g'`" -- open
    alias run='open -a'
fi
##Functions##

cdf() {
    target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
    if [ "$target" != "" ]; then
        cd "$target"; pwd
    else
        echo 'No Finder window found' >&2
    fi
}

movtogif() {
    ffmpeg -i "$1" -vf scale=800:-1 -r 10 -f image2pipe -vcodec ppm - |\
    convert -delay 5 -layers Optimize -loop 0 - "$2"
}

dls() {
 # directory LS
 echo `ls -l | grep "^d" | awk '{ print $9 }' | tr -d "/"`
}

dgrep() {
    # A recursive, case-insensitive grep that excludes binary files
    grep -iR "$@" * | grep -v "Binary"
}

dfgrep() {
    # A recursive, case-insensitive grep that excludes binary files
    # and returns only unique filenames
    grep -iR "$@" * | grep -v "Binary" | sed 's/:/ /g' | awk '{ print $1 }' | sort | uniq
}

psgrep() {
    if [ ! -z $1 ] ; then
        echo "Grepping for processes matching $1..."
        ps aux | grep $1 | grep -v grep
    else
        echo "!! Need name to grep for"
    fi
}

# run command and show result in vim for editing
vimcmd() { $1 > $2 && vim $2; }

# run command and show result in subl for editing
sublcmd() { $1 > $2 && subl $2; }

# copy auth key
add_auth_key () {
    ssh-copy-id $@
}

fuck() {
    if killall -9 "$2"; then
        echo ; echo " (ノಠ-ಠ)ノ ︵$(echo "$2"|toilet -f term -F rotate)"; echo
    fi
}

extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)        tar xjf $1        ;;
            *.tar.gz)         tar xzf $1        ;;
            *.bz2)            bunzip2 $1        ;;
            *.rar)            unrar x $1        ;;
            *.gz)             gunzip $1         ;;
            *.tar)            tar xf $1         ;;
            *.tbz2)           tar xjf $1        ;;
            *.tgz)            tar xzf $1        ;;
            *.zip)            unzip $1          ;;
            *.Z)              uncompress $1     ;;
            *)                echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

killit() {
    # Kills any process that matches a regexp passed to it
    ps aux | grep -v "grep" | grep "$@" | awk '{print $2}' | xargs sudo kill
}

# if cannot find tree then build a command
tree() {
  find $@ -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
}

mcd() {
    mkdir "$@" && cd "$@"
}

# zip directory to /tmp and bcp it
bcpdir() {

    curr_time=`date +%s`
    file=/tmp/files_$curr_time.zip

    if [[ -d $1 ]]; then

        # dir
        cd $1
        zip -r -9 $2 $file .

    elif [[ -f $1 ]]; then

        # single file
        file_dir=`dirname $1`
        file_name=`basename $1`
        cd $file_dir
        zip -r -9 $2 $file $file_name

    else
        echo "$1 is not valid!"
        exit 1
    fi

    bcp $file
    rm $file
    cd -
}

# Open argument in Dash
function dash() {
open "dash://$*"
}

function dman() {
    open "dash://man:$*"
}


# Vim style shell

bindkey -v

# Use vim cli mode
bindkey '^P' up-history
bindkey '^N' down-history

# backspace and ^h working even after
# # returning from command mode
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char

# ctrl-w removed word backwards
bindkey '^w' backward-kill-word

# ctrl-r starts searching history backward
bindkey '^r' history-incremental-search-backward

#show mode in prompt
function zle-line-init zle-keymap-select {
    VIM_PROMPT="%{$fg_bold[yellow]%} [% NORMAL]%  %{$reset_color%}"
    RPS1="${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/} $EPS1"
    zle reset-prompt
}

zle -N zle-line-init
zle -N zle-keymap-select
export KEYTIMEOUT=1


# For Node
# export NODE_PATH = "/usr/local/lib/node"

# Add virtualenvwrapper env parameter
#export VIRTUALENV_DISTRIBUTE=true
#VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
#export WORKON_HOME=$HOME/.virtualenvs
#source /usr/local/bin/virtualenvwrapper.sh

# For boxen
# [ -f /opt/boxen/env.sh ] && source /opt/boxen/env.sh
#source /opt/boxen/homebrew/opt/autoenv/activate.sh

# For autojump
[[ -s `brew --prefix`/etc/autojump.sh ]] && . `brew --prefix`/etc/autojump.sh

# For tmuxinator
# [[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator
export EDITOR='vim'
# The use_env call below is a reusable command to activate/create a new Python
# virtualenv, requiring only a single declarative line of code in your .env files.
# It only performs an action if the requested virtualenv is not the current one.
use_env() {
  typeset venv
  venv="$1"
  if [[ `basename "${VIRTUAL_ENV:t}"` != "$venv" ]]; then
    if workon | grep $venv > /dev/null; then
      workon "$venv"
    else
      echo -n "Create virtualenv $venv now? (Yn) "
      read answer
      if [[ "$answer" == "Y" ]]; then
        mkvirtualenv "$venv"
      fi
    fi
  fi
}

# tmuxinator completion
#source ~/.bin/tmuxinator.zsh

# for autojump
[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] && . $(brew --prefix)/etc/profile.d/autojump.sh
autoload -U compinit && compinit

eval "$(rbenv init -)"
# required for https://github.com/imathis/octopress/issues/144
export LC_CTYPE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

#export ANDROID_HOME=~/adt-bundle-mac/
#export ANDROID_SDK_ROOT=/Users/lenciel/adt-bundle-mac/sdk/
#export ANDROID_NDK_ROOT=/Users/lenciel/adt-bundle-mac/android-ndk-r10e/
#export NDK_ROOT=/Users/lenciel/adt-bundle-mac/android-ndk-r10e/

#export GOPATH="$HOME/Projects/go"
#export MANPATH="/opt/boxen/homebrew/opt/coreutils/libexec/gnuman:$MANPATH"
#export PATH="$GOPATH/bin:/Users/lenciel/bin/apk2g:/usr/local/git/bin:/opt/boxen/homebrew/opt/coreutils/libexec/gnubin:/opt/boxen/homebrew/opt/go/libexec/bin:/opt/boxen/rbenv/bin:/opt/boxen/homebrew/bin:$ANDROID_SDK_ROOT:$ANDROID_NDK_ROOT:$PATH"

preexec() { echo "$(date "+%Y-%m-%d.%H:%M:%S") $(pwd) $1" >> ~/.logs/zsh-history-$(date "+%Y-%m-%d").log; }

export PATH="/usr/local/opt/gettext/bin:$PATH"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
